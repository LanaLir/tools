//Статус код 200
pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});

//Спарсить response body в json.
let resp_data = pm.response.json();

//Спарсить request
let req_data = request.data;

//Проверить, что json response имеет параметр start_qa_salary
pm.test("Include 'start_qa_salary'", function () {
    pm.expect(JSON.stringify(resp_data)).to.include("start_qa_salary");
});

//Проверить, что json response имеет параметр qa_salary_after_6_months
pm.test("Include 'qa_salary_after_6_months'", function () {
    pm.expect(resp_data).to.have.property("qa_salary_after_6_months");
    });

//Проверить, что json response имеет параметр qa_salary_after_12_months
pm.test("Include 'qa_salary_after_12_months'", function () {
    pm.expect(resp_data).to.have.property("qa_salary_after_12_months");
});

//Проверить, что json response имеет параметр qa_salary_after_1.5_year
pm.test("Include 'qa_salary_after_1.5_year'", function () {
    pm.expect(resp_data).to.have.property("qa_salary_after_1.5_year");
});

//Проверить, что json response имеет параметр qa_salary_after_3.5_years
pm.test("Include 'qa_salary_after_3.5_years'", function () {
    pm.expect(resp_data).to.have.property("qa_salary_after_3.5_years");
});

//Проверить, что json response имеет параметр person
pm.test("Include 'person'", function () {
    pm.expect(resp_data).to.have.property("person");
});

//Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)
salary = Number(req_data.salary)  //зарплата из request

pm.test("Check start_qa_salary", function () {
    pm.expect(resp_data.start_qa_salary).to.eql(salary);
});

//Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)
pm.test("Check qa_salary_after_6_months", function () {
    pm.expect(resp_data.qa_salary_after_6_months).to.eql(salary*2);
});

//Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)
pm.test("Check qa_salary_after_12_months", function () {
    pm.expect(resp_data.qa_salary_after_12_months).to.eql(salary*2.7);
});

//Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)
pm.test("Check qa_salary_after_1.5_year", function () {
    pm.expect(resp_data['qa_salary_after_1.5_year']).to.eql(salary*3.3);
});

//Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)
pm.test("Check qa_salary_after_3.5_years", function () {
    pm.expect(resp_data['qa_salary_after_3.5_years']).to.eql(salary*3.8);
});

//Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)
let person = resp_data.person; 

pm.test("Chek person.u_name[1]", function () {
    pm.expect(person.u_name[1]).to.eql(salary);
});

// Проверить, что что параметр u_age равен age из request (age забрать из request.)
req_age = Number(req_data.age)

pm.test("Chek person.u_age", function () {
    pm.expect(person.u_age).to.eql(req_age);
});

//Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)
pm.test("Chek u_salary_5_years", function () {
    pm.expect(person.u_salary_5_years).to.eql(salary*4.2);
});

//***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.
 console.log(person)


for (let key in person) {
    if (typeof(person[key] === 'object')) {
        console.log(" - " + key + ": " + person[key])
        for (let prop in person[key]) {
            console.log(' -----' + prop + ': ' + person[key][prop])
        } 
    } 
}
