{
	"info": {
		"_postman_id": "a95aec2d-ff15-49ce-9c41-901167bb2061",
		"name": "HW_postman_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "21456180"
	},
	"item": [
		{
			"name": "first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Проверить, что в body приходит правильный string\r",
							"\r",
							"pm.test(\"Body is correct\", function () {\r",
							"    pm.response.to.have.body(\"This is the first responce from server!\");\r",
							"});\r",
							"\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"This is the first responce from server!\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{serv}}:{{port}}/first",
					"host": [
						"{{serv}}"
					],
					"port": "{{port}}",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Спарсить response body в json\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"/*Проверить, что name/age/salary в ответе равно name/age/salary s request (nameage/age/salary вбить руками.)*/\r",
							"\r",
							"pm.test(\"Check name\", function () {\r",
							"    pm.expect(jsonData.name).to.eql('Lana');\r",
							"});\r",
							"\r",
							"pm.test(\"Check age\", function () {\r",
							"    pm.expect(jsonData.age).to.eql('38');\r",
							"});\r",
							"\r",
							"pm.test(\"Check salary\", function () {\r",
							"    pm.expect(jsonData.salary).to.eql(1000);\r",
							"});\r",
							"\r",
							"//Спарсить request.\r",
							"let req = request.data;\r",
							"let req_name = req.name;\r",
							"let req_salary = Number(req.salary);\r",
							"console.log(req_salary)\r",
							"\r",
							"/*Проверить соответствуют ли имя, возраст и зп в  ответе  значениям из request (name/age/salaty забрать из request)*/\r",
							"\r",
							"pm.test(\"Check name_req\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(req_name);\r",
							"});\r",
							"\r",
							"pm.test(\"Check age_req\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(req.age);\r",
							"});\r",
							"\r",
							"pm.test(\"Check salary_req\", function () {\r",
							"    pm.expect(jsonData.salary).to.eql(req_salary);\r",
							"});\r",
							"\r",
							"//Вывести в консоль параметр family из response\r",
							"let resp_family = jsonData.family;\r",
							"console.log(resp_family);\r",
							"\r",
							"//Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"let resp_u_salary_1_5_year = jsonData.family.u_salary_1_5_year;\r",
							"let salary_1_5 = req_salary*4;\r",
							"\r",
							"pm.test(\"Salary 1,5 year\", function () {\r",
							"   pm.expect(resp_u_salary_1_5_year).to.eql(salary_1_5);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Lana",
							"type": "text"
						},
						{
							"key": "age",
							"value": "38",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{serv}}:{{port}}/user_info_3",
					"host": [
						"{{serv}}"
					],
					"port": "{{port}}",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Спарсить response body в json\r",
							"let resp_jsonData = pm.response.json();\r",
							"\r",
							"//Спарсить request.\r",
							"let req_data = pm.request.url.query.toObject();\r",
							"\r",
							"//Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"let resp_name = resp_jsonData.name;\r",
							"let req_name = req_data.name;\r",
							"\r",
							"pm.test(\"Check name\", function () {\r",
							"    pm.expect(resp_name).to.eql(req_name);\r",
							"});\r",
							"\r",
							"//Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Check age\", function () {\r",
							"    pm.expect(resp_jsonData.age).to.eql(req_data.age);\r",
							"});\r",
							"\r",
							"//Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"req_salary = Number(req_data.salary)\r",
							"pm.test(\"Check salary\", function () {\r",
							"    pm.expect(resp_jsonData.salary).to.eql(req_salary);\r",
							"});\r",
							"\r",
							"//Вывести в консоль параметр family из response.\r",
							"console.log(resp_jsonData.family);\r",
							"\r",
							"//Проверить, что у параметра dog есть параметры name.\r",
							"let dog = resp_jsonData.family.pets.dog;\r",
							"\r",
							"pm.test(\"Dog have name\", function () {\r",
							"    pm.expect(dog).to.have.property('name');\r",
							"});\r",
							"\r",
							"//Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"Dog have age\", function () {\r",
							"    pm.expect(dog).to.have.property('age');\r",
							"});\r",
							"\r",
							"\r",
							"//Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"Check dog's name\", function () {\r",
							"    pm.expect(dog.name).to.eql('Luky');\r",
							"});\r",
							"\r",
							"//Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\"Check dog's age\", function () {\r",
							"    pm.expect(dog.age).to.eql(4);})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{serv}}:{{port}}/object_info_3?name=Lana&age=38&salary=1000",
					"host": [
						"{{serv}}"
					],
					"port": "{{port}}",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Lana"
						},
						{
							"key": "age",
							"value": "38"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Спарсить response body в json.\r",
							"let resp_data = pm.response.json();\r",
							"\r",
							"//Спарсить request.\r",
							"let req_data = pm.request.url.query.toObject();\r",
							"\r",
							"//Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Chek name\", function () {\r",
							"    pm.expect(resp_data.name).to.eql(req_data.name);\r",
							"});\r",
							"\r",
							"//Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"req_age = Number(req_data.age);\r",
							"\r",
							"pm.test(\"Chek age\", function () {\r",
							"    pm.expect(resp_data.age).to.eql(req_age);\r",
							"});\r",
							"\r",
							"//Вывести в консоль параметр salary из request.\r",
							"console.log(req_data.salary);\r",
							"\r",
							"//Вывести в консоль параметр salary из response.\r",
							"console.log(resp_data.salary);\r",
							"\r",
							"//Вывести в консоль 0-й элемент параметра salary из response.\r",
							"console.log(resp_data.salary[0]);\r",
							"\r",
							"//Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"console.log(resp_data.salary[1]);\r",
							"\r",
							"//Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"console.log(resp_data.salary[2]);\r",
							"\r",
							"//Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"salary = Number(req_data.salary);\r",
							"\r",
							"pm.test(\"check salary[0]\", function () {\r",
							"       pm.expect(resp_data.salary[0]).to.eql(salary);\r",
							"});\r",
							"\r",
							"//Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"check salary[1]\", function () {\r",
							"       pm.expect(Number(resp_data.salary[1])).to.eql(salary*2);\r",
							"});\r",
							"\r",
							"//Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test(\"check salary[2]\", function () {\r",
							"       pm.expect(Number(resp_data.salary[2])).to.eql(salary*3);\r",
							"});\r",
							"\r",
							"//Создать в окружении переменную name и передать значение\r",
							"pm.environment.set(\"name\", resp_data.name);\r",
							"console.log(pm.environment.get(\"name\"));\r",
							"\r",
							"//Создать в окружении переменную age и передать значение\r",
							"pm.environment.set(\"age\", resp_data.age);\r",
							"console.log(pm.environment.get(\"age\"));\r",
							"\r",
							"//Создать в окружении переменную salary и передать значение\r",
							"pm.environment.set(\"salary\", resp_data.salary[0]);\r",
							"console.log(pm.environment.get(\"salary\"));\r",
							"\r",
							"// Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"let resp_salary = resp_data.salary;\r",
							"\r",
							"for (i = 0; i < resp_salary.length; i++) {\r",
							"    console.log(resp_data.salary[i])\r",
							"};\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{serv}}:{{port}}/object_info_4?name=Lana&age=38&salary=2000",
					"host": [
						"{{serv}}"
					],
					"port": "{{port}}",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Lana"
						},
						{
							"key": "age",
							"value": "38"
						},
						{
							"key": "salary",
							"value": "2000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Спарсить response body в json.\r",
							"let resp_data = pm.response.json();\r",
							"\r",
							"//Спарсить request\r",
							"let req_data = request.data;\r",
							"\r",
							"//Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"Include 'start_qa_salary'\", function () {\r",
							"    pm.expect(JSON.stringify(resp_data)).to.include(\"start_qa_salary\");\r",
							"});\r",
							"\r",
							"//Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"Include 'qa_salary_after_6_months'\", function () {\r",
							"    pm.expect(resp_data).to.have.property(\"qa_salary_after_6_months\");\r",
							"    });\r",
							"\r",
							"//Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"Include 'qa_salary_after_12_months'\", function () {\r",
							"    pm.expect(resp_data).to.have.property(\"qa_salary_after_12_months\");\r",
							"});\r",
							"\r",
							"//Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"Include 'qa_salary_after_1.5_year'\", function () {\r",
							"    pm.expect(resp_data).to.have.property(\"qa_salary_after_1.5_year\");\r",
							"});\r",
							"\r",
							"//Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"Include 'qa_salary_after_3.5_years'\", function () {\r",
							"    pm.expect(resp_data).to.have.property(\"qa_salary_after_3.5_years\");\r",
							"});\r",
							"\r",
							"//Проверить, что json response имеет параметр person\r",
							"pm.test(\"Include 'person'\", function () {\r",
							"    pm.expect(resp_data).to.have.property(\"person\");\r",
							"});\r",
							"\r",
							"//Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"salary = Number(req_data.salary)  //зарплата из request\r",
							"\r",
							"pm.test(\"Check start_qa_salary\", function () {\r",
							"    pm.expect(resp_data.start_qa_salary).to.eql(salary);\r",
							"});\r",
							"\r",
							"//Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"Check qa_salary_after_6_months\", function () {\r",
							"    pm.expect(resp_data.qa_salary_after_6_months).to.eql(salary*2);\r",
							"});\r",
							"\r",
							"//Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test(\"Check qa_salary_after_12_months\", function () {\r",
							"    pm.expect(resp_data.qa_salary_after_12_months).to.eql(salary*2.7);\r",
							"});\r",
							"\r",
							"//Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"pm.test(\"Check qa_salary_after_1.5_year\", function () {\r",
							"    pm.expect(resp_data['qa_salary_after_1.5_year']).to.eql(salary*3.3);\r",
							"});\r",
							"\r",
							"//Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test(\"Check qa_salary_after_3.5_years\", function () {\r",
							"    pm.expect(resp_data['qa_salary_after_3.5_years']).to.eql(salary*3.8);\r",
							"});\r",
							"\r",
							"//Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"let person = resp_data.person; \r",
							"\r",
							"pm.test(\"Chek person.u_name[1]\", function () {\r",
							"    pm.expect(person.u_name[1]).to.eql(salary);\r",
							"});\r",
							"\r",
							"// Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"req_age = Number(req_data.age)\r",
							"\r",
							"pm.test(\"Chek person.u_age\", function () {\r",
							"    pm.expect(person.u_age).to.eql(req_age);\r",
							"});\r",
							"\r",
							"//Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test(\"Chek u_salary_5_years\", function () {\r",
							"    pm.expect(person.u_salary_5_years).to.eql(salary*4.2);\r",
							"});\r",
							"\r",
							"//***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							" console.log(person)\r",
							"\r",
							"\r",
							"for (let key in person) {\r",
							"    if (typeof(person[key] === 'object')) {\r",
							"        console.log(\" - \" + key + \": \" + person[key])\r",
							"        for (let prop in person[key]) {\r",
							"            console.log(' -----' + prop + ': ' + person[key][prop])\r",
							"        } \r",
							"    } \r",
							"}\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{serv}}:{{port}}/user_info_2",
					"host": [
						"{{serv}}"
					],
					"port": "{{port}}",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}